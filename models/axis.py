"""Provides a scripting component.
    Inputs:
        x: The x script variable
        y: The y script variable
    Output:
        a: The a output variable"""

__author__ = "andrewastakhov"

import copy, json
import Rhino.Geometry as rgg
from math import pi

import copy

from math import pi
from scipy.spatial import distance as spdist
import uuid
import numpy as np


class EpsTuple(tuple):
    """
    Tuple with epsilon equal metric.
    It can be useful in geometric transformations with floating point e.g. tessellation .
    --------------------------------------------------------------------------------------------------------------------

    >>> TuplePt.eps = 0.001
    >>> TuplePt((1.0,1.0,1.0))==TuplePt((0.9999,0.9999,0.9999))
    True
    >>> TuplePt((1.0,1.0,1.0))==TuplePt((1.0001,0.9999,0.9999))
    True
    >>> TuplePt((1.0,1.0,1.0))==TuplePt((1.1111,0.9999,0.9999))
    False
    """
    _eps = 0.001

    def __new__(cls, *args, **kwargs):
        return super().__new__(cls, *args, **kwargs)

    @property
    def eps(self): return self._eps

    @eps.setter
    def eps(self, v: float): self._eps = v

    def __eq__(self, other):
        return np.allclose(np.abs((np.asarray(self) - np.asarray(other))) <= self.eps, True)

    def __str__(self):
        return f"{super().__str__()} eps={self.eps}"


def get_prof():
    return rgg.GeometryBase.FromJSON(json.dumps({"version": 10000, "archive3dm": 70, "opennurbs": -1879014078,
                                                 "data": ""}))


def trimnextend(crv, t):
    crvn = crv.Trim(t, 1.0)
    # print(crv)
    return crvn


def ln(ca, cb, ta, tb):
    c = rgg.Line(ca.PointAt(ta), cb.PointAt(tb))
    return c


def cpln(ln):
    c = rgg.Line(ln.From, ln.To)
    return c


def extend(c, prm):
    c2 = cpln(c)
    c2.Extend(prm, prm)

    return c2


def pln(cc3):
    cc = cc3.ToNurbsCurve()
    _, e = cc.FrameAt(0)
    e.Rotate(pi / 2, e.YAxis)
    return e


# vva=rgg.Vector3d(points-tl)
# vva.Unitize()
# vval=vva*600


def cyl(line, prm):
    lne = extend(line, 10000)
    return rgg.Cylinder(rgg.Circle(pln(lne), prm), lne.Length)


def cl(ca, cb, prm, ta, tb):
    a = ca.Trim(ta, ca.Domain.T1)
    b = cb.Trim(tb, cb.Domain.T1)
    cylinder = cyl(ln(a, b, ta, tb), prm)
    newcrva = rgg.Intersect.Intersection.CurveSurface(a, cylinder.ToNurbsSurface(), 0.01, 0.01)[0].ParameterA
    newcrvb = rgg.Intersect.Intersection.CurveSurface(b, cylinder.ToNurbsSurface(), 0.01, 0.01)[0].ParameterA
    return a, b, newcrva, newcrvb


def plns(ca, cb, t1a, t1b, t2a, t2b):
    z11 = rgg.Vector3d(cb.PointAt(t1b) - ca.PointAt(t1a))
    ll = extend(ln(ca, cb, t2a, t2b), 10000)
    x2 = rgg.Vector3d(cb.PointAt(t1b) - ll.ClosestPoint(cb.PointAt(t1b), True))

    x1 = rgg.Vector3d(ca.PointAt(t1a) - ll.ClosestPoint(ca.PointAt(t1a), True))

    pln1 = rgg.Plane(ca.PointAt(t1a), x1, rgg.Vector3d.CrossProduct(x1, z11))
    pln2 = rgg.Plane(cb.PointAt(t1b), x2, rgg.Vector3d.CrossProduct(x2, z11))

    return pln1, pln2


def create_buffer(indices, verts, normals, uv):
    return {
        "uuid": uuid.uuid4().__str__(),
        "type": "BufferGeometry",
        "data": {
            "attributes": {
                "normal": {
                    "array": np.asarray(normals, dtype=float).flatten().tolist(),
                    "itemSize": 3,
                    "type": "Float32Array",
                    "normalized": False
                },
                "position": {
                    "array": np.asarray(verts, dtype=float).flatten().tolist(),
                    "itemSize": 3,
                    "type": "Float32Array",
                    "normalized": False
                },
                "uv": {
                    'itemSize': 2,
                    "array": np.asarray(uv, dtype=float).flatten().tolist(),
                    "type": "Float32Array",
                    "normalized": False

                },

            },
            "index": dict(type='Uint16Array',
                          array=np.asarray(indices, dtype=int).flatten().tolist())
        }
    }


Tuple2dVec = TupleUV = Tuple2dPt = EpsTuple[float, float]
Tuple3dPt = Tuple3dVec = EpsTuple[float, float, float]
Tuple4dPt = TupleWPt = EpsTuple[float, float, float, float]


def get_mesh_uv(msh): return [(i.X, i.Y) for i in list(msh.TextureCoordinates)]


def get_np_mesh_uv(msh): return np.asarray(get_mesh_uv(msh))


def get_mesh_vertices(msh): return [(i.X, i.Y, i.Z) for i in list(msh.Vertices)]


def get_np_mesh_vertices(msh): return np.asarray(get_mesh_vertices(msh))


def get_mesh_normals(msh): return [(i.X, i.Y, i.Z) for i in list(msh.Normals)]


def get_np_mesh_normals(msh): return np.asarray(get_mesh_normals(msh))


def mesh_decomposition(msh):
    f = msh.Faces
    f.ConvertQuadsToTriangles()
    vertss = get_mesh_vertices(msh)
    normals = get_mesh_normals(msh)
    llst = []
    vv = []
    for i in range(f.TriangleCount):
        pts = f.GetFaceVertices(i)
        lst = []
        for i in range(3):
            pt = pts[i + 1]
            vv.append((pt.X, pt.Y, pt.Z))
            try:
                lst.append(vertss.index((pt.X, pt.Y, pt.Z)))
            except ValueError as err:
                vrt = list(range(len(vertss)))
                vrt.sort(key=lambda x: spdist.cosine([pt.X, pt.Y, pt.Z], vertss[x]))
                lst.append(vrt[0])

        llst.append(lst)

    return llst, vertss, normals


def brep_to_buffer_mesh(brep,

                        name="Extrusion",

                        cast_shadow=True,
                        receive_shadow=True,
                        layers=1,
                        matrix=(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)):
    geom = brep_to_buf(brep)
    return {
        "geometries": [geom],
        "materials": [],
        "object": {
            "uuid": uuid.uuid4().__str__(),
            "type": "Mesh",
            "name": name,
            "castShadow": cast_shadow,
            "receiveShadow": receive_shadow,
            "layers": layers,
            "matrix": matrix,
            "geometry": geom["uuid"],
            "material": None
        }}


def mesh_to_buf(mesh):
    return create_buffer(*mesh_decomposition(mesh), get_mesh_uv(mesh))


def brep_to_buf(brep):
    return mesh_to_buf(list(rgg.Mesh.CreateFromBrep(brep, rgg.MeshingParameters.FastRenderMesh))[0])


def prof_extrusion(prof, vec, xf):
    ext = rgg.Extrusion.Create(prof, vec.Length, True)
    ext.Transform(xf)

    return ext.ToBrep(False)


def next_body(self):
    self.ca1, self.cb1, self.ta1, self.tb1 = cl(self.ca, self.cb, self.prm, self.ta, self.tb)
    res1 = ln(self.ca1, self.cb1, self.ta1, self.tb1)
    plna, plnb = plns(self.ca1, self.cb1, self.ta, self.tb, self.ta1, self.tb1)
    xf = rgg.Transform.PlaneToPlane(rgg.Plane.WorldXY, plnb)
    vec = rgg.Vector3d(plna.Origin - plnb.Origin)
    extr = prof_extrusion(self.prof, vec, xf)
    self.ta, self.tb, self.ca, self.cb = self.ta1, self.tb1, self.ca1, self.cb1
    return extr, res1


class CellingGenerator:
    def __init__(self, crvs, starts, prm):
        self.ca, self.cb = crvs
        self.ta, self.tb = starts
        self.prm = prm
        self.prof = get_prof()
        self._i = -1
        self.lines = []

    def __iter__(self):
        return self

    def __next__(self):
        self._i += 1

        try:
            # self.ca, self.cb, self.ta, self.tb = cl(self.ca, self.cb, self.prm, self.ta, self.tb)
            # line = ln(self.ca, self.cb, self.ta, self.tb)
            extr, line = next_body(self)
            return {"extrusion": brep_to_buffer_mesh(extr), "line": [
                {
                    "x": line.From.X,
                    "y": line.From.Y,
                    "z": line.From.Z},
                {
                    "x": line.To.X,
                    "y": line.To.Y,
                    "z": line.To.Z
                }
            ]}

        except Exception as err:

            raise StopIteration()

    def __getitem__(self, item):
        l = None
        for i in range(item):
            l = self.next()
        return l


def generate_point(point):
    return rgg.Point3d(point["x"], point["y"], point["z"])


def generate_points(points):
    return [generate_point(point) for point in points]


def generate_polyline(points):
    return rgg.Polyline(generate_points(points)).ToPolylineCurve()


def extend_curve(curve, start=0.0, end=0.0):
    curve = curve.Extend(rgg.CurveEnd.Start, start, rgg.CurveExtensionStyle.Line)
    curve = curve.Extend(rgg.CurveEnd.End, end, rgg.CurveExtensionStyle.Line)
    return curve
